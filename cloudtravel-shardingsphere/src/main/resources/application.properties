application.name=cloudtravel-shardingsphere
server.port=8093

logging.level.web=info
# 可打印详细启动日志
logging.level.root=info

# ************************** sharding sphere config start ****************************

# Configure actual data sources
spring.shardingsphere.datasource.names=cloudtravel_consumer1,cloudtravel_consumer2

# Configure the 1st data source
spring.shardingsphere.datasource.cloudtravel_consumer1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.cloudtravel_consumer1.url=jdbc:mysql://localhost:3306/cloudtravel_consumer1?useAffectedRows=true&serverTimezone=UTC&characterEncoding=utf-8
spring.shardingsphere.datasource.cloudtravel_consumer1.username=root
spring.shardingsphere.datasource.cloudtravel_consumer1.password=root

# Configure the 2nd data source
spring.shardingsphere.datasource.cloudtravel_consumer2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.cloudtravel_consumer2.jdbc-url=jdbc:mysql://localhost:3306/cloudtravel_consumer2?useAffectedRows=true&serverTimezone=UTC&characterEncoding=utf-8
spring.shardingsphere.datasource.cloudtravel_consumer2.username=root
spring.shardingsphere.datasource.cloudtravel_consumer2.password=root

# 分库策略配置

# 具体的分库策略类(自己定义)
# 逻辑表t_sp对应的真实的表(节点)列表，也就是库名.表名，可以分开写，也可以使用如下行表达式
spring.shardingsphere.sharding.tables.b_user.actual-data-nodes=cloudtravel_consumer$->{1..2}.b_user

# 逻辑表t_sp要根据哪个列进行分库
spring.shardingsphere.sharding.tables.b_user.database-strategy.inline.sharding-column=tenant_id
# 具体的分库策略类(自己定义)
spring.shardingsphere.sharding.tables.b_user.database-strategy.complex.algorithm-class-name=com.cloudtravel.shardingsphere.db.DatabaseShardingAlgorithm


# 分表策略配置 , 类似于分库 . 以下策略二选一
# 自动分表配置
spring.shardingsphere.sharding.tables.t_sp.actual-data-nodes=cloudtravel_consumer$->{1..2}.t_sp_$->{0...1}
# 分表字段
spring.shardingsphere.sharding.tables.t_sp.database-strategy.complex.sharding-columns=FOUNDER_ACCOUNT_ID
# 分表策略类（也可以不用配置类，直接在配置文件配置策略表达式，适合一些简单的业务场景）
spring.shardingsphere.sharding.tables.t_sp.database-strategy.complex.algorithm-class-name=com.cloudtravel.shardingsphere.db.ComplexTableExecutionShardingAlgorithm

# 是否打印sql语句
spring.shardingsphere.props.sql.show=true

mybatis.mapper-locations=classpath:mapper/*.xml


# ************************** sharding sphere config end ****************************

#close template check
spring.freemarker.checkTemplateLocation=false

# dubbo config
dubbo.application.name=cloudtravel-consumer
dubbo.registry.protocol=zookeeper
dubbo.registry.address=127.0.0.1:2181
dubbo.protocol.name=dubbo
dubbo.protocol.port=20893

dubbo.monitor.protocol=registry

# dubbo.scan.base-packages=com.cloudtravel.consumer

dubbo.registry.timeout=10000

#dubbo.consumer.check=false

spring.thymeleaf.prefix=classpath:templates/
spring.thymeleaf.cache=false
spring.thymeleaf.check-template=false
spring.thymeleaf.check-template-location=false

Access-Control-Allow-Origin=*


# ************************** redis config start ****************************
spring.redis.dataBase=0
spring.redis.host=127.0.0.1
spring.redis.port=6379
spring.redis.password=
# 连接池最大阻塞等待时间,使用负数表示无限制
spring.redis.maxWait=30000
# 连接池最大连接数 , -1表示不限
spring.redis.maxActive=100
# 连接池中最大空闲连接. 达到上限时,若有连接需求进来,则优先使用空闲连接
spring.redis.maxIdle=20
# 连接池中最小空闲连接数
spring.redis.minIdle=0
# redis处理超时时间
spring.redis.timeOut=3000
# ************************** redis config end ****************************

